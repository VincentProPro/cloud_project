---
- name: Deploy Prometheus, Grafana, and Node Exporter
  hosts: servers
  become: true  # To run tasks with sudo
  vars:
    prometheus_server2_ip: "20.105.130.188"
    node_exporter_server1_ip: "104.47.137.199"


  tasks:
    - name: Update apt cache (for Debian/Ubuntu)
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install necessary dependencies
      package:
        name: "{{ item }}"
        state: present
      loop:
        - curl
        - software-properties-common  # for adding repositories
        - apt-transport-https        # for using HTTPS with APT

    - name: Download and extract Node Exporter on server1
      shell: |
        wget https://github.com/prometheus/node_exporter/releases/download/v0.15.2/node_exporter-0.15.2.linux-amd64.tar.gz
        tar -xf node_exporter-0.15.2.linux-amd64.tar.gz
        sudo mv node_exporter-0.15.2.linux-amd64/node_exporter /usr/local/bin
        rm -r node_exporter-0.15.2.linux-amd64*
        
      args:
        executable: /bin/bash
      when: "'server1' in inventory_hostname"

    - name: Download and extract Node Exporter on server2
      shell: |
        wget https://github.com/prometheus/node_exporter/releases/download/v0.15.2/node_exporter-0.15.2.linux-amd64.tar.gz
        tar -xf node_exporter-0.15.2.linux-amd64.tar.gz
        sudo mv node_exporter-0.15.2.linux-amd64/node_exporter /usr/local/bin
        rm -r node_exporter-0.15.2.linux-amd64*
        sudo apt-get install gnupg -y

      args:
        executable: /bin/bash
      when: "'server2' in inventory_hostname"

    - name: Create systemd unit file for Node Exporter on server1
      become: yes
      template:
        src: node_exporter.service
        dest: /etc/systemd/system/node_exporter.service
      notify: restart node_exporter
      when: "'server1' in inventory_hostname"

    - name: Enable and start Node Exporter service on server1
      become: yes
      systemd:
        name: node_exporter
        enabled: yes
        state: started
      when: "'server1' in inventory_hostname"
    - name: Create systemd unit file for Node Exporter on server2
      become: yes
      template:
        src: node_exporter.service
        dest: /etc/systemd/system/node_exporter.service
      notify: restart node_exporter
      when: "'server2' in inventory_hostname"

    - name: Enable and start Node Exporter service on server2
      become: yes
      systemd:
        name: node_exporter
        enabled: yes
        state: started
      when: "'server2' in inventory_hostname"  
    - name: Add Prometheus APT key
      apt_key:
        url: https://packages.grafana.com/gpg.key
      when: "'server2' in inventory_hostname"

    - name: Add Prometheus APT repository
      apt_repository:
        repo: deb https://packages.grafana.com/oss/deb stable main
      when: "'server2' in inventory_hostname"


    - name: Create Prometheus configuration file
      become: yes
      template:
        src: prometheus.yml.j2
        dest: /etc/prometheus/prometheus.yml
      notify: restart prometheus
      when: "'server2' in inventory_hostname"

    - name: Ensure Prometheus directories ownership
      file:
        path: "{{ item }}"
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'
      loop:
        - /etc/prometheus
        - /var/lib/prometheus
      when: "'server2' in inventory_hostname"

    - name: Create systemd unit file for Prometheus
      become: yes
      template:
        src: prometheus.service
        dest: /etc/systemd/system/prometheus.service
      notify: restart prometheus
      when: "'server2' in inventory_hostname"

    - name: Install AlertManager on server2
      apt:
        name: prometheus-alertmanager
        state: present
      when: "'server2' in inventory_hostname"
    - name: Download and install AlertManager on server2
      become: yes
      shell: |
        sudo su
        cd /opt/ 
        wget https://github.com/prometheus/alertmanager/releases/download/v0.11.0/alertmanager-0.11.0.linux-amd64.tar.gz 
        tar -xvzf alertmanager-0.11.0.linux-amd64.tar.gz 
        mv alertmanager-0.11.0.linux-amd64/alertmanager /usr/local/bin/ 
        mkdir /etc/alertmanager
      args:
        executable: /bin/bash
      when: "'server2' in inventory_hostname"

    - name: Create AlertManager configuration file
      become: yes
      template:
        src: alertmanager.yml.j2
        dest: /etc/alertmanager/alertmanager.yml
      notify: restart alertmanager
      when: "'server2' in inventory_hostname"
    - name: Create AlertManager service file
      template:
        src: alertmanager.service
        dest: /etc/systemd/system/alertmanager.service
      notify: restart alertmanager
      when: "'server2' in inventory_hostname"

    - name: Create alert rules
      become: yes
      template:
        src: alert.rules
        dest: /etc/prometheus/alert.rules.yml
      notify: restart prometheus
      when: "'server2' in inventory_hostname"

    - name: Install Grafana on server2
      apt:
        name: grafana
        state: present
      when: "'server2' in inventory_hostname"

    - name: Enable and start Grafana service
      systemd:
        name: grafana-server
        enabled: yes
        state: started
      when: "'server2' in inventory_hostname"

    - name: Configure Grafana data source
      uri:
        url: http://admin:admin@localhost:3000/api/datasources
        method: POST
        body_format: json
        body: '{"name":"Prometheus","type":"prometheus","url":"http://localhost:9090","access":"proxy","isDefault":true}'
        status_code: 200
      retries: 5
      delay: 5
      when: "'server2' in inventory_hostname"
    - name: Install Prometheus, AlertManager, and Grafana on server2
      package:
        name: "{{ item }}"
        state: present
      loop:
        - prometheus
        - alertmanager
        - grafana
      when: "'server2' in inventory_hostname"
        - name: Configure Grafana data source
      uri:
        url: http://admin:admin@{{ prometheus_server2_ip }}:3000/api/datasources
        method: POST
        body_format: json
        body: '{"name":"Prometheus","type":"prometheus","url":"http://{{prometheus_server2_ip}}:9090","access":"proxy","isDefault":true}'
        status_code: 200
      retries: 5
      delay: 5
      when: "'server2' in inventory_hostname"
    - name: Configure Grafana Datasource
      uri:
        url: "http://{{ prometheus_server2_ip }}:3000/api/datasources"
        method: POST
        headers:
          Content-Type: "application/json"
        body: |
          {
            "name": "Prometheus",
            "type": "prometheus",
            "url": "http://{{ prometheus_server2_ip }}:9090",
            "access": "proxy",
            "isDefault": true
          }
        status_code: 200
        user: "admin"
        password: "admin"
      delegate_to: localhost
      when: "'server2' in inventory_hostname"




  handlers:
    - name: restart node_exporter
      systemd:
        name: node_exporter
        state: restarted
    - name: restart prometheus
      systemd:
        name: prometheus
        state: restarted

    - name: restart alertmanager
      systemd:
        name: alertmanager
        state: restarted

